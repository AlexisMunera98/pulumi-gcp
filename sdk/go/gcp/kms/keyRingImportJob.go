// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type KeyRingImportJob struct {
	pulumi.CustomResourceState

	// Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this
	// statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen
	// ImportMethod is one with a protection level of HSM.
	Attestation KeyRingImportJobAttestationOutput `pulumi:"attestation"`
	// The time at which this resource is scheduled for expiration and can no longer be used. This is in RFC3339 text format.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}
	ImportJobId pulumi.StringOutput `pulumi:"importJobId"`
	// The wrapping method to be used for incoming key material.
	ImportMethod pulumi.StringOutput `pulumi:"importMethod"`
	// The KeyRing that this import job belongs to.
	// Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
	KeyRing pulumi.StringOutput `pulumi:"keyRing"`
	// The resource name for this ImportJob in the format projects/*/locations/*/keyRings/*/importJobs/*.
	Name pulumi.StringOutput `pulumi:"name"`
	// The protection level of the ImportJob. This must match the protectionLevel of the
	// versionTemplate on the CryptoKey you attempt to import into.
	ProtectionLevel pulumi.StringOutput `pulumi:"protectionLevel"`
	// The public key with which to wrap key material prior to import. Only returned if state is 'ACTIVE'.
	PublicKey KeyRingImportJobPublicKeyOutput `pulumi:"publicKey"`
	// The current state of the ImportJob, indicating if it can be used.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewKeyRingImportJob registers a new resource with the given unique name, arguments, and options.
func NewKeyRingImportJob(ctx *pulumi.Context,
	name string, args *KeyRingImportJobArgs, opts ...pulumi.ResourceOption) (*KeyRingImportJob, error) {
	if args == nil || args.ImportJobId == nil {
		return nil, errors.New("missing required argument 'ImportJobId'")
	}
	if args == nil || args.ImportMethod == nil {
		return nil, errors.New("missing required argument 'ImportMethod'")
	}
	if args == nil || args.KeyRing == nil {
		return nil, errors.New("missing required argument 'KeyRing'")
	}
	if args == nil || args.ProtectionLevel == nil {
		return nil, errors.New("missing required argument 'ProtectionLevel'")
	}
	if args == nil {
		args = &KeyRingImportJobArgs{}
	}
	var resource KeyRingImportJob
	err := ctx.RegisterResource("gcp:kms/keyRingImportJob:KeyRingImportJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyRingImportJob gets an existing KeyRingImportJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyRingImportJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyRingImportJobState, opts ...pulumi.ResourceOption) (*KeyRingImportJob, error) {
	var resource KeyRingImportJob
	err := ctx.ReadResource("gcp:kms/keyRingImportJob:KeyRingImportJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyRingImportJob resources.
type keyRingImportJobState struct {
	// Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this
	// statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen
	// ImportMethod is one with a protection level of HSM.
	Attestation *KeyRingImportJobAttestation `pulumi:"attestation"`
	// The time at which this resource is scheduled for expiration and can no longer be used. This is in RFC3339 text format.
	ExpireTime *string `pulumi:"expireTime"`
	// It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}
	ImportJobId *string `pulumi:"importJobId"`
	// The wrapping method to be used for incoming key material.
	ImportMethod *string `pulumi:"importMethod"`
	// The KeyRing that this import job belongs to.
	// Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
	KeyRing *string `pulumi:"keyRing"`
	// The resource name for this ImportJob in the format projects/*/locations/*/keyRings/*/importJobs/*.
	Name *string `pulumi:"name"`
	// The protection level of the ImportJob. This must match the protectionLevel of the
	// versionTemplate on the CryptoKey you attempt to import into.
	ProtectionLevel *string `pulumi:"protectionLevel"`
	// The public key with which to wrap key material prior to import. Only returned if state is 'ACTIVE'.
	PublicKey *KeyRingImportJobPublicKey `pulumi:"publicKey"`
	// The current state of the ImportJob, indicating if it can be used.
	State *string `pulumi:"state"`
}

type KeyRingImportJobState struct {
	// Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this
	// statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen
	// ImportMethod is one with a protection level of HSM.
	Attestation KeyRingImportJobAttestationPtrInput
	// The time at which this resource is scheduled for expiration and can no longer be used. This is in RFC3339 text format.
	ExpireTime pulumi.StringPtrInput
	// It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}
	ImportJobId pulumi.StringPtrInput
	// The wrapping method to be used for incoming key material.
	ImportMethod pulumi.StringPtrInput
	// The KeyRing that this import job belongs to.
	// Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
	KeyRing pulumi.StringPtrInput
	// The resource name for this ImportJob in the format projects/*/locations/*/keyRings/*/importJobs/*.
	Name pulumi.StringPtrInput
	// The protection level of the ImportJob. This must match the protectionLevel of the
	// versionTemplate on the CryptoKey you attempt to import into.
	ProtectionLevel pulumi.StringPtrInput
	// The public key with which to wrap key material prior to import. Only returned if state is 'ACTIVE'.
	PublicKey KeyRingImportJobPublicKeyPtrInput
	// The current state of the ImportJob, indicating if it can be used.
	State pulumi.StringPtrInput
}

func (KeyRingImportJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRingImportJobState)(nil)).Elem()
}

type keyRingImportJobArgs struct {
	// It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}
	ImportJobId string `pulumi:"importJobId"`
	// The wrapping method to be used for incoming key material.
	ImportMethod string `pulumi:"importMethod"`
	// The KeyRing that this import job belongs to.
	// Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
	KeyRing string `pulumi:"keyRing"`
	// The protection level of the ImportJob. This must match the protectionLevel of the
	// versionTemplate on the CryptoKey you attempt to import into.
	ProtectionLevel string `pulumi:"protectionLevel"`
}

// The set of arguments for constructing a KeyRingImportJob resource.
type KeyRingImportJobArgs struct {
	// It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}
	ImportJobId pulumi.StringInput
	// The wrapping method to be used for incoming key material.
	ImportMethod pulumi.StringInput
	// The KeyRing that this import job belongs to.
	// Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
	KeyRing pulumi.StringInput
	// The protection level of the ImportJob. This must match the protectionLevel of the
	// versionTemplate on the CryptoKey you attempt to import into.
	ProtectionLevel pulumi.StringInput
}

func (KeyRingImportJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRingImportJobArgs)(nil)).Elem()
}
