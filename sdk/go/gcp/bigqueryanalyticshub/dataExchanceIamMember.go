// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigqueryanalyticshub

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}} * {{project}}/{{location}}/{{data_exchange_id}} * {{location}}/{{data_exchange_id}} * {{data_exchange_id}} Any variables not passed in the import command will be taken from the provider configuration. Bigquery Analytics Hub dataexchange IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:bigqueryanalyticshub/dataExchanceIamMember:DataExchanceIamMember editor "projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:bigqueryanalyticshub/dataExchanceIamMember:DataExchanceIamMember editor "projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:bigqueryanalyticshub/dataExchanceIamMember:DataExchanceIamMember editor projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type DataExchanceIamMember struct {
	pulumi.CustomResourceState

	Condition DataExchanceIamMemberConditionPtrOutput `pulumi:"condition"`
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId pulumi.StringOutput `pulumi:"dataExchangeId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The name of the location this data exchange.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringOutput `pulumi:"location"`
	Member   pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigqueryanalyticshub.DataExchangeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewDataExchanceIamMember registers a new resource with the given unique name, arguments, and options.
func NewDataExchanceIamMember(ctx *pulumi.Context,
	name string, args *DataExchanceIamMemberArgs, opts ...pulumi.ResourceOption) (*DataExchanceIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataExchangeId == nil {
		return nil, errors.New("invalid value for required argument 'DataExchangeId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource DataExchanceIamMember
	err := ctx.RegisterResource("gcp:bigqueryanalyticshub/dataExchanceIamMember:DataExchanceIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataExchanceIamMember gets an existing DataExchanceIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataExchanceIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataExchanceIamMemberState, opts ...pulumi.ResourceOption) (*DataExchanceIamMember, error) {
	var resource DataExchanceIamMember
	err := ctx.ReadResource("gcp:bigqueryanalyticshub/dataExchanceIamMember:DataExchanceIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataExchanceIamMember resources.
type dataExchanceIamMemberState struct {
	Condition *DataExchanceIamMemberCondition `pulumi:"condition"`
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId *string `pulumi:"dataExchangeId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The name of the location this data exchange.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	Member   *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigqueryanalyticshub.DataExchangeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type DataExchanceIamMemberState struct {
	Condition DataExchanceIamMemberConditionPtrInput
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The name of the location this data exchange.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Member   pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `bigqueryanalyticshub.DataExchangeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (DataExchanceIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataExchanceIamMemberState)(nil)).Elem()
}

type dataExchanceIamMemberArgs struct {
	Condition *DataExchanceIamMemberCondition `pulumi:"condition"`
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId string `pulumi:"dataExchangeId"`
	// The name of the location this data exchange.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	Member   string  `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigqueryanalyticshub.DataExchangeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a DataExchanceIamMember resource.
type DataExchanceIamMemberArgs struct {
	Condition DataExchanceIamMemberConditionPtrInput
	// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
	DataExchangeId pulumi.StringInput
	// The name of the location this data exchange.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Member   pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `bigqueryanalyticshub.DataExchangeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (DataExchanceIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataExchanceIamMemberArgs)(nil)).Elem()
}

type DataExchanceIamMemberInput interface {
	pulumi.Input

	ToDataExchanceIamMemberOutput() DataExchanceIamMemberOutput
	ToDataExchanceIamMemberOutputWithContext(ctx context.Context) DataExchanceIamMemberOutput
}

func (*DataExchanceIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**DataExchanceIamMember)(nil)).Elem()
}

func (i *DataExchanceIamMember) ToDataExchanceIamMemberOutput() DataExchanceIamMemberOutput {
	return i.ToDataExchanceIamMemberOutputWithContext(context.Background())
}

func (i *DataExchanceIamMember) ToDataExchanceIamMemberOutputWithContext(ctx context.Context) DataExchanceIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataExchanceIamMemberOutput)
}

// DataExchanceIamMemberArrayInput is an input type that accepts DataExchanceIamMemberArray and DataExchanceIamMemberArrayOutput values.
// You can construct a concrete instance of `DataExchanceIamMemberArrayInput` via:
//
//	DataExchanceIamMemberArray{ DataExchanceIamMemberArgs{...} }
type DataExchanceIamMemberArrayInput interface {
	pulumi.Input

	ToDataExchanceIamMemberArrayOutput() DataExchanceIamMemberArrayOutput
	ToDataExchanceIamMemberArrayOutputWithContext(context.Context) DataExchanceIamMemberArrayOutput
}

type DataExchanceIamMemberArray []DataExchanceIamMemberInput

func (DataExchanceIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataExchanceIamMember)(nil)).Elem()
}

func (i DataExchanceIamMemberArray) ToDataExchanceIamMemberArrayOutput() DataExchanceIamMemberArrayOutput {
	return i.ToDataExchanceIamMemberArrayOutputWithContext(context.Background())
}

func (i DataExchanceIamMemberArray) ToDataExchanceIamMemberArrayOutputWithContext(ctx context.Context) DataExchanceIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataExchanceIamMemberArrayOutput)
}

// DataExchanceIamMemberMapInput is an input type that accepts DataExchanceIamMemberMap and DataExchanceIamMemberMapOutput values.
// You can construct a concrete instance of `DataExchanceIamMemberMapInput` via:
//
//	DataExchanceIamMemberMap{ "key": DataExchanceIamMemberArgs{...} }
type DataExchanceIamMemberMapInput interface {
	pulumi.Input

	ToDataExchanceIamMemberMapOutput() DataExchanceIamMemberMapOutput
	ToDataExchanceIamMemberMapOutputWithContext(context.Context) DataExchanceIamMemberMapOutput
}

type DataExchanceIamMemberMap map[string]DataExchanceIamMemberInput

func (DataExchanceIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataExchanceIamMember)(nil)).Elem()
}

func (i DataExchanceIamMemberMap) ToDataExchanceIamMemberMapOutput() DataExchanceIamMemberMapOutput {
	return i.ToDataExchanceIamMemberMapOutputWithContext(context.Background())
}

func (i DataExchanceIamMemberMap) ToDataExchanceIamMemberMapOutputWithContext(ctx context.Context) DataExchanceIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataExchanceIamMemberMapOutput)
}

type DataExchanceIamMemberOutput struct{ *pulumi.OutputState }

func (DataExchanceIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataExchanceIamMember)(nil)).Elem()
}

func (o DataExchanceIamMemberOutput) ToDataExchanceIamMemberOutput() DataExchanceIamMemberOutput {
	return o
}

func (o DataExchanceIamMemberOutput) ToDataExchanceIamMemberOutputWithContext(ctx context.Context) DataExchanceIamMemberOutput {
	return o
}

func (o DataExchanceIamMemberOutput) Condition() DataExchanceIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *DataExchanceIamMember) DataExchanceIamMemberConditionPtrOutput { return v.Condition }).(DataExchanceIamMemberConditionPtrOutput)
}

// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. Used to find the parent resource to bind the IAM policy to
func (o DataExchanceIamMemberOutput) DataExchangeId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchanceIamMember) pulumi.StringOutput { return v.DataExchangeId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o DataExchanceIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchanceIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The name of the location this data exchange.
// Used to find the parent resource to bind the IAM policy to
func (o DataExchanceIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchanceIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o DataExchanceIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchanceIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o DataExchanceIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchanceIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `bigqueryanalyticshub.DataExchangeIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o DataExchanceIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *DataExchanceIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type DataExchanceIamMemberArrayOutput struct{ *pulumi.OutputState }

func (DataExchanceIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataExchanceIamMember)(nil)).Elem()
}

func (o DataExchanceIamMemberArrayOutput) ToDataExchanceIamMemberArrayOutput() DataExchanceIamMemberArrayOutput {
	return o
}

func (o DataExchanceIamMemberArrayOutput) ToDataExchanceIamMemberArrayOutputWithContext(ctx context.Context) DataExchanceIamMemberArrayOutput {
	return o
}

func (o DataExchanceIamMemberArrayOutput) Index(i pulumi.IntInput) DataExchanceIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataExchanceIamMember {
		return vs[0].([]*DataExchanceIamMember)[vs[1].(int)]
	}).(DataExchanceIamMemberOutput)
}

type DataExchanceIamMemberMapOutput struct{ *pulumi.OutputState }

func (DataExchanceIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataExchanceIamMember)(nil)).Elem()
}

func (o DataExchanceIamMemberMapOutput) ToDataExchanceIamMemberMapOutput() DataExchanceIamMemberMapOutput {
	return o
}

func (o DataExchanceIamMemberMapOutput) ToDataExchanceIamMemberMapOutputWithContext(ctx context.Context) DataExchanceIamMemberMapOutput {
	return o
}

func (o DataExchanceIamMemberMapOutput) MapIndex(k pulumi.StringInput) DataExchanceIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataExchanceIamMember {
		return vs[0].(map[string]*DataExchanceIamMember)[vs[1].(string)]
	}).(DataExchanceIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataExchanceIamMemberInput)(nil)).Elem(), &DataExchanceIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataExchanceIamMemberArrayInput)(nil)).Elem(), DataExchanceIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataExchanceIamMemberMapInput)(nil)).Elem(), DataExchanceIamMemberMap{})
	pulumi.RegisterOutputType(DataExchanceIamMemberOutput{})
	pulumi.RegisterOutputType(DataExchanceIamMemberArrayOutput{})
	pulumi.RegisterOutputType(DataExchanceIamMemberMapOutput{})
}
