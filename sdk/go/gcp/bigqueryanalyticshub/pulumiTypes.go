// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigqueryanalyticshub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataExchanceIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// DataExchanceIamMemberConditionInput is an input type that accepts DataExchanceIamMemberConditionArgs and DataExchanceIamMemberConditionOutput values.
// You can construct a concrete instance of `DataExchanceIamMemberConditionInput` via:
//
//	DataExchanceIamMemberConditionArgs{...}
type DataExchanceIamMemberConditionInput interface {
	pulumi.Input

	ToDataExchanceIamMemberConditionOutput() DataExchanceIamMemberConditionOutput
	ToDataExchanceIamMemberConditionOutputWithContext(context.Context) DataExchanceIamMemberConditionOutput
}

type DataExchanceIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (DataExchanceIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataExchanceIamMemberCondition)(nil)).Elem()
}

func (i DataExchanceIamMemberConditionArgs) ToDataExchanceIamMemberConditionOutput() DataExchanceIamMemberConditionOutput {
	return i.ToDataExchanceIamMemberConditionOutputWithContext(context.Background())
}

func (i DataExchanceIamMemberConditionArgs) ToDataExchanceIamMemberConditionOutputWithContext(ctx context.Context) DataExchanceIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataExchanceIamMemberConditionOutput)
}

func (i DataExchanceIamMemberConditionArgs) ToDataExchanceIamMemberConditionPtrOutput() DataExchanceIamMemberConditionPtrOutput {
	return i.ToDataExchanceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i DataExchanceIamMemberConditionArgs) ToDataExchanceIamMemberConditionPtrOutputWithContext(ctx context.Context) DataExchanceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataExchanceIamMemberConditionOutput).ToDataExchanceIamMemberConditionPtrOutputWithContext(ctx)
}

// DataExchanceIamMemberConditionPtrInput is an input type that accepts DataExchanceIamMemberConditionArgs, DataExchanceIamMemberConditionPtr and DataExchanceIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `DataExchanceIamMemberConditionPtrInput` via:
//
//	        DataExchanceIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type DataExchanceIamMemberConditionPtrInput interface {
	pulumi.Input

	ToDataExchanceIamMemberConditionPtrOutput() DataExchanceIamMemberConditionPtrOutput
	ToDataExchanceIamMemberConditionPtrOutputWithContext(context.Context) DataExchanceIamMemberConditionPtrOutput
}

type dataExchanceIamMemberConditionPtrType DataExchanceIamMemberConditionArgs

func DataExchanceIamMemberConditionPtr(v *DataExchanceIamMemberConditionArgs) DataExchanceIamMemberConditionPtrInput {
	return (*dataExchanceIamMemberConditionPtrType)(v)
}

func (*dataExchanceIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataExchanceIamMemberCondition)(nil)).Elem()
}

func (i *dataExchanceIamMemberConditionPtrType) ToDataExchanceIamMemberConditionPtrOutput() DataExchanceIamMemberConditionPtrOutput {
	return i.ToDataExchanceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *dataExchanceIamMemberConditionPtrType) ToDataExchanceIamMemberConditionPtrOutputWithContext(ctx context.Context) DataExchanceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataExchanceIamMemberConditionPtrOutput)
}

type DataExchanceIamMemberConditionOutput struct{ *pulumi.OutputState }

func (DataExchanceIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataExchanceIamMemberCondition)(nil)).Elem()
}

func (o DataExchanceIamMemberConditionOutput) ToDataExchanceIamMemberConditionOutput() DataExchanceIamMemberConditionOutput {
	return o
}

func (o DataExchanceIamMemberConditionOutput) ToDataExchanceIamMemberConditionOutputWithContext(ctx context.Context) DataExchanceIamMemberConditionOutput {
	return o
}

func (o DataExchanceIamMemberConditionOutput) ToDataExchanceIamMemberConditionPtrOutput() DataExchanceIamMemberConditionPtrOutput {
	return o.ToDataExchanceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o DataExchanceIamMemberConditionOutput) ToDataExchanceIamMemberConditionPtrOutputWithContext(ctx context.Context) DataExchanceIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataExchanceIamMemberCondition) *DataExchanceIamMemberCondition {
		return &v
	}).(DataExchanceIamMemberConditionPtrOutput)
}

func (o DataExchanceIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataExchanceIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DataExchanceIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DataExchanceIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o DataExchanceIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DataExchanceIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type DataExchanceIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (DataExchanceIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataExchanceIamMemberCondition)(nil)).Elem()
}

func (o DataExchanceIamMemberConditionPtrOutput) ToDataExchanceIamMemberConditionPtrOutput() DataExchanceIamMemberConditionPtrOutput {
	return o
}

func (o DataExchanceIamMemberConditionPtrOutput) ToDataExchanceIamMemberConditionPtrOutputWithContext(ctx context.Context) DataExchanceIamMemberConditionPtrOutput {
	return o
}

func (o DataExchanceIamMemberConditionPtrOutput) Elem() DataExchanceIamMemberConditionOutput {
	return o.ApplyT(func(v *DataExchanceIamMemberCondition) DataExchanceIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret DataExchanceIamMemberCondition
		return ret
	}).(DataExchanceIamMemberConditionOutput)
}

func (o DataExchanceIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataExchanceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o DataExchanceIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataExchanceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o DataExchanceIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataExchanceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type DataExchangeIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// DataExchangeIamBindingConditionInput is an input type that accepts DataExchangeIamBindingConditionArgs and DataExchangeIamBindingConditionOutput values.
// You can construct a concrete instance of `DataExchangeIamBindingConditionInput` via:
//
//	DataExchangeIamBindingConditionArgs{...}
type DataExchangeIamBindingConditionInput interface {
	pulumi.Input

	ToDataExchangeIamBindingConditionOutput() DataExchangeIamBindingConditionOutput
	ToDataExchangeIamBindingConditionOutputWithContext(context.Context) DataExchangeIamBindingConditionOutput
}

type DataExchangeIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (DataExchangeIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataExchangeIamBindingCondition)(nil)).Elem()
}

func (i DataExchangeIamBindingConditionArgs) ToDataExchangeIamBindingConditionOutput() DataExchangeIamBindingConditionOutput {
	return i.ToDataExchangeIamBindingConditionOutputWithContext(context.Background())
}

func (i DataExchangeIamBindingConditionArgs) ToDataExchangeIamBindingConditionOutputWithContext(ctx context.Context) DataExchangeIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataExchangeIamBindingConditionOutput)
}

func (i DataExchangeIamBindingConditionArgs) ToDataExchangeIamBindingConditionPtrOutput() DataExchangeIamBindingConditionPtrOutput {
	return i.ToDataExchangeIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i DataExchangeIamBindingConditionArgs) ToDataExchangeIamBindingConditionPtrOutputWithContext(ctx context.Context) DataExchangeIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataExchangeIamBindingConditionOutput).ToDataExchangeIamBindingConditionPtrOutputWithContext(ctx)
}

// DataExchangeIamBindingConditionPtrInput is an input type that accepts DataExchangeIamBindingConditionArgs, DataExchangeIamBindingConditionPtr and DataExchangeIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `DataExchangeIamBindingConditionPtrInput` via:
//
//	        DataExchangeIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type DataExchangeIamBindingConditionPtrInput interface {
	pulumi.Input

	ToDataExchangeIamBindingConditionPtrOutput() DataExchangeIamBindingConditionPtrOutput
	ToDataExchangeIamBindingConditionPtrOutputWithContext(context.Context) DataExchangeIamBindingConditionPtrOutput
}

type dataExchangeIamBindingConditionPtrType DataExchangeIamBindingConditionArgs

func DataExchangeIamBindingConditionPtr(v *DataExchangeIamBindingConditionArgs) DataExchangeIamBindingConditionPtrInput {
	return (*dataExchangeIamBindingConditionPtrType)(v)
}

func (*dataExchangeIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataExchangeIamBindingCondition)(nil)).Elem()
}

func (i *dataExchangeIamBindingConditionPtrType) ToDataExchangeIamBindingConditionPtrOutput() DataExchangeIamBindingConditionPtrOutput {
	return i.ToDataExchangeIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *dataExchangeIamBindingConditionPtrType) ToDataExchangeIamBindingConditionPtrOutputWithContext(ctx context.Context) DataExchangeIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataExchangeIamBindingConditionPtrOutput)
}

type DataExchangeIamBindingConditionOutput struct{ *pulumi.OutputState }

func (DataExchangeIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataExchangeIamBindingCondition)(nil)).Elem()
}

func (o DataExchangeIamBindingConditionOutput) ToDataExchangeIamBindingConditionOutput() DataExchangeIamBindingConditionOutput {
	return o
}

func (o DataExchangeIamBindingConditionOutput) ToDataExchangeIamBindingConditionOutputWithContext(ctx context.Context) DataExchangeIamBindingConditionOutput {
	return o
}

func (o DataExchangeIamBindingConditionOutput) ToDataExchangeIamBindingConditionPtrOutput() DataExchangeIamBindingConditionPtrOutput {
	return o.ToDataExchangeIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o DataExchangeIamBindingConditionOutput) ToDataExchangeIamBindingConditionPtrOutputWithContext(ctx context.Context) DataExchangeIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataExchangeIamBindingCondition) *DataExchangeIamBindingCondition {
		return &v
	}).(DataExchangeIamBindingConditionPtrOutput)
}

func (o DataExchangeIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataExchangeIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DataExchangeIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DataExchangeIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o DataExchangeIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DataExchangeIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type DataExchangeIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (DataExchangeIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataExchangeIamBindingCondition)(nil)).Elem()
}

func (o DataExchangeIamBindingConditionPtrOutput) ToDataExchangeIamBindingConditionPtrOutput() DataExchangeIamBindingConditionPtrOutput {
	return o
}

func (o DataExchangeIamBindingConditionPtrOutput) ToDataExchangeIamBindingConditionPtrOutputWithContext(ctx context.Context) DataExchangeIamBindingConditionPtrOutput {
	return o
}

func (o DataExchangeIamBindingConditionPtrOutput) Elem() DataExchangeIamBindingConditionOutput {
	return o.ApplyT(func(v *DataExchangeIamBindingCondition) DataExchangeIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret DataExchangeIamBindingCondition
		return ret
	}).(DataExchangeIamBindingConditionOutput)
}

func (o DataExchangeIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataExchangeIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o DataExchangeIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataExchangeIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o DataExchangeIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataExchangeIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataExchanceIamMemberConditionInput)(nil)).Elem(), DataExchanceIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataExchanceIamMemberConditionPtrInput)(nil)).Elem(), DataExchanceIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataExchangeIamBindingConditionInput)(nil)).Elem(), DataExchangeIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataExchangeIamBindingConditionPtrInput)(nil)).Elem(), DataExchangeIamBindingConditionArgs{})
	pulumi.RegisterOutputType(DataExchanceIamMemberConditionOutput{})
	pulumi.RegisterOutputType(DataExchanceIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(DataExchangeIamBindingConditionOutput{})
	pulumi.RegisterOutputType(DataExchangeIamBindingConditionPtrOutput{})
}
