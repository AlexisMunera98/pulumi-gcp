// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { EndpointArgs, EndpointState } from "./endpoint";
export type Endpoint = import("./endpoint").Endpoint;
export const Endpoint: typeof import("./endpoint").Endpoint = null as any;

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;

export { NamespaceIamBindingArgs, NamespaceIamBindingState } from "./namespaceIamBinding";
export type NamespaceIamBinding = import("./namespaceIamBinding").NamespaceIamBinding;
export const NamespaceIamBinding: typeof import("./namespaceIamBinding").NamespaceIamBinding = null as any;

export { NamespaceIamMemberArgs, NamespaceIamMemberState } from "./namespaceIamMember";
export type NamespaceIamMember = import("./namespaceIamMember").NamespaceIamMember;
export const NamespaceIamMember: typeof import("./namespaceIamMember").NamespaceIamMember = null as any;

export { NamespaceIamPolicyArgs, NamespaceIamPolicyState } from "./namespaceIamPolicy";
export type NamespaceIamPolicy = import("./namespaceIamPolicy").NamespaceIamPolicy;
export const NamespaceIamPolicy: typeof import("./namespaceIamPolicy").NamespaceIamPolicy = null as any;

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;

export { ServiceIamBindingArgs, ServiceIamBindingState } from "./serviceIamBinding";
export type ServiceIamBinding = import("./serviceIamBinding").ServiceIamBinding;
export const ServiceIamBinding: typeof import("./serviceIamBinding").ServiceIamBinding = null as any;

export { ServiceIamMemberArgs, ServiceIamMemberState } from "./serviceIamMember";
export type ServiceIamMember = import("./serviceIamMember").ServiceIamMember;
export const ServiceIamMember: typeof import("./serviceIamMember").ServiceIamMember = null as any;

export { ServiceIamPolicyArgs, ServiceIamPolicyState } from "./serviceIamPolicy";
export type ServiceIamPolicy = import("./serviceIamPolicy").ServiceIamPolicy;
export const ServiceIamPolicy: typeof import("./serviceIamPolicy").ServiceIamPolicy = null as any;

utilities.lazyLoad(exports, ["Endpoint"], () => require("./endpoint"));
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));
utilities.lazyLoad(exports, ["NamespaceIamBinding"], () => require("./namespaceIamBinding"));
utilities.lazyLoad(exports, ["NamespaceIamMember"], () => require("./namespaceIamMember"));
utilities.lazyLoad(exports, ["NamespaceIamPolicy"], () => require("./namespaceIamPolicy"));
utilities.lazyLoad(exports, ["Service"], () => require("./service"));
utilities.lazyLoad(exports, ["ServiceIamBinding"], () => require("./serviceIamBinding"));
utilities.lazyLoad(exports, ["ServiceIamMember"], () => require("./serviceIamMember"));
utilities.lazyLoad(exports, ["ServiceIamPolicy"], () => require("./serviceIamPolicy"));

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:servicedirectory/endpoint:Endpoint":
                return new Endpoint(name, <any>undefined, { urn })
            case "gcp:servicedirectory/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "gcp:servicedirectory/namespaceIamBinding:NamespaceIamBinding":
                return new NamespaceIamBinding(name, <any>undefined, { urn })
            case "gcp:servicedirectory/namespaceIamMember:NamespaceIamMember":
                return new NamespaceIamMember(name, <any>undefined, { urn })
            case "gcp:servicedirectory/namespaceIamPolicy:NamespaceIamPolicy":
                return new NamespaceIamPolicy(name, <any>undefined, { urn })
            case "gcp:servicedirectory/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "gcp:servicedirectory/serviceIamBinding:ServiceIamBinding":
                return new ServiceIamBinding(name, <any>undefined, { urn })
            case "gcp:servicedirectory/serviceIamMember:ServiceIamMember":
                return new ServiceIamMember(name, <any>undefined, { urn })
            case "gcp:servicedirectory/serviceIamPolicy:ServiceIamPolicy":
                return new ServiceIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/endpoint", _module)
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/namespace", _module)
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/namespaceIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/namespaceIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/namespaceIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/service", _module)
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/serviceIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/serviceIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/serviceIamPolicy", _module)
